graph.traversal()
    .V()
    .hasLabel('continent').as('continent')
    .outE('contains').inV()
    .hasLabel('airport').as('airport')
    .inE('contains').outV()
    .hasLabel('country').as('country')
    .group()
    .by(
        project('continent', 'country')
            .by(select('continent').values('desc'))
            .by(select('country').valueMap('code', 'desc'))
    )
    .by(select('airport').values('elev').order().fold())
    .unfold()
    .order().by(keys, Order.asc)
    .map {
        def key = it.get().key
        def continentDesc = key['continent']
        def countryCode = key['country']['code'][0]
        def countryDesc = key['country']['desc'][0]
        def elevations = it.get().value
        continentDesc + " " + countryCode + " (" + countryDesc + ") " + elevations
    }


graph.traversal().V().hasLabel('continent').as('continent').outE('contains').inV().hasLabel('airport').as('airport').inE('contains').outV().hasLabel('country').as('country').group().by(project('continent', 'country').by(select('continent').values('desc')).by(select('country').valueMap('code', 'desc'))).by(select('airport').values('elev').order().fold()).unfold().order().by(keys, Order.asc).map { def key = it.get().key; def continentDesc = key['continent']; def countryCode = key['country']['code'][0]; def countryDesc = key['country']['desc'][0]; def elevations = it.get().value; continentDesc + " " + countryCode + " (" + countryDesc + ") " + elevations }




